import os.path
import time
import datetime
import pytz

import telebot
from telebot import types

separator = os.path.sep

with open(f"Tokens{separator}tokens.txt") as file:
    file_str = file.readlines()
    token_main = file_str[0].split()[1]

main_bot = telebot.TeleBot(token_main)

stations = ["Kosmonavtov_Avenue", "Uralmash", "Mashinostroiteley", "Uralskaya", "Dinamo", "Square_of_1905",
            "Geologicheskaya", "Chkalovskaya", "Botanicheskaya"]
stations_rus = ["–ü—Ä–æ—Å–ø–µ–∫—Ç –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤", "–£—Ä–∞–ª–º–∞—à", "–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π", "–£—Ä–∞–ª—å—Å–∫–∞—è", "–î–∏–Ω–∞–º–æ", "–ü–ª–æ—â–∞–¥—å 1905 –≥–æ–¥–∞",
                "–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è", "–ß–∫–∞–ª–æ–≤—Å–∫–∞—è", "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è"]

months = ["–Ø–Ω–≤–∞—Ä—è", "–§–µ–≤—Ä–∞–ª—è", "–ú–∞—Ä—Ç–∞", "–ê–ø—Ä–µ–ª—è", "–ú–∞—è", "–ò—é–Ω—è", "–ò—é–ª—è", "–ê–≤–≥—É—Å—Ç–∞", "–°–µ–Ω—Ç—è–±—Ä—è", "–û–∫—Ç—è–±—Ä—è", "–ù–æ—è–±—Ä—è",
          "–î–µ–∫–∞–±—Ä—è"]

global start_station
global finish_station
global edit_message_id


@main_bot.message_handler(commands=['start'])
def start_func(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
    :param message: –ü–æ–ª—É—á–∞–µ—Ç message –æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞.
    :return: None

    """
    global edit_message_id

    with open("BD" + separator + "users.txt", "r+", encoding="utf-8") as user_file:
        users = user_file.readlines()
        flag = False
        for line in users:
            if message.from_user.username in line:
                flag = True
                break

        city_p = pytz.timezone("Asia/Yekaterinburg")
        city_day = datetime.datetime.now().astimezone(city_p).strftime("%d")
        city_month = months[datetime.datetime.now().astimezone(city_p).month - 1]

        if not flag:
            user_file.write("@" + message.from_user.username + f" –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω {city_day} {city_month}\n")

    marcup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    menu_button = types.KeyboardButton("–ú–µ–Ω—é")
    marcup.row(menu_button)

    main_bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name}!\n"
                                           f"–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ–µ–∑–¥–∞ –¥–ª—è —Ç–≤–æ–µ–π "
                                           f"—Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ.\n"
                                           f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!", reply_markup=marcup)

    menu_func(message)
    return None


@main_bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫–Ω–æ–ø–∫–∞—Ö –º–µ–Ω—é.
    :param callback: –ü–æ–ª—É—á–∞–µ—Ç callback –æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞.
    :return: None

    """
    global start_station
    global finish_station

    if callback.data in stations:
        start_station = callback.data
        marcup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–ü—Ä–æ—Å–ø–µ–∫—Ç –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤", callback_data="start")
        button2 = types.InlineKeyboardButton("–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è", callback_data="finish")
        back_button = types.InlineKeyboardButton("<- –ù–∞–∑–∞–¥", callback_data="back")
        marcup.row(button1, button2)
        marcup.add(back_button)

        if start_station == "Kosmonavtov_Avenue":
            finish_station = "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è"
            send_schedule(callback.message)
        elif start_station == "Botanicheskaya":
            finish_station = "–ü—Ä–æ—Å–ø–µ–∫—Ç –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤"
            send_schedule(callback.message)
        else:
            main_bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É, –∫—É–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –µ—Ö–∞—Ç—å", callback.message.chat.id,
                                       callback.message.message_id, reply_markup=marcup)

    elif callback.data == "back":
        menu_func(callback.message)
    else:
        if callback.data == "start":
            finish_station = "–ü—Ä–æ—Å–ø–µ–∫—Ç –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤"
        else:
            finish_station = "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è"
        send_schedule(callback.message)
        menu_func(callback.message)


@main_bot.message_handler()
def user_say_func(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param message: –ü–æ–ª—É—á–∞–µ—Ç message –æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞.
    :return: None

    """

    if message.text.lower() == "–º–µ–Ω—é":
        menu_func(message)


def send_schedule(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:

    `–°–µ–≥–æ–¥–Ω—è [–ß–∏—Å–ª–æ –ú–µ—Å—è—Ü], [–î–ï–ù–¨ –ù–ï–î–ï–õ–ò]`
    `–¢–µ–∫—É—â–µ–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è [–ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã]`

    `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–µ–∑–¥–æ–≤ –≤ –†–∞–±–æ—á–∏–µ –¥–Ω–∏ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ [–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è] –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–∞–Ω—Ü–∏–∏ [–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è]:`
        `1. [–ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã] - –æ—Å—Ç–∞–ª–æ—Å—å [–ú–∏–Ω—É—Ç –¥–æ –ø–æ–µ–∑–¥–∞] –º–∏–Ω—É—Ç`
        `2. [–ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã] - –æ—Å—Ç–∞–ª–æ—Å—å [–ú–∏–Ω—É—Ç –¥–æ –ø–æ–µ–∑–¥–∞] –º–∏–Ω—É—Ç`
        `3. [–ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã] - –æ—Å—Ç–∞–ª–æ—Å—å [–ú–∏–Ω—É—Ç –¥–æ –ø–æ–µ–∑–¥–∞] –º–∏–Ω—É—Ç`

    `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–µ–∑–¥–æ–≤ –≤ –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ [–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è] –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–∞–Ω—Ü–∏–∏ [–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è]:`
        `1. [–ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã] - –æ—Å—Ç–∞–ª–æ—Å—å [–ú–∏–Ω—É—Ç –¥–æ –ø–æ–µ–∑–¥–∞] –º–∏–Ω—É—Ç`
        `2. [–ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã] - –æ—Å—Ç–∞–ª–æ—Å—å [–ú–∏–Ω—É—Ç –¥–æ –ø–æ–µ–∑–¥–∞] –º–∏–Ω—É—Ç`
        `3. [–ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã] - –æ—Å—Ç–∞–ª–æ—Å—å [–ú–∏–Ω—É—Ç –¥–æ –ø–æ–µ–∑–¥–∞] –º–∏–Ω—É—Ç`
    :param message: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–µ–Ω—é.
    :return: None

    """
    try:
        global edit_message_id
        global start_station
        global finish_station

        with open(f"BD{separator}" + f"{start_station}.txt", encoding="utf-8") as file:
            hours = int(datetime.datetime.now(pytz.utc).strftime("%H")) + 5
            if hours >= 25:
                hours -= 24
            minutes = int(datetime.datetime.now().strftime("%M"))
            now_time = hours * 60 + minutes

            if hours >= 24:
                hours -= 24
            if hours < 10:
                hours = "0" + str(hours)
            if minutes < 10:
                minutes = "0" + str(minutes)

            bot_message = "ü§î"

            edit_message_id = message.message_id + 1
            main_bot.edit_message_text(bot_message, message.chat.id, edit_message_id)
            time.sleep(1)

            week_day = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

            city_p = pytz.timezone("Asia/Yekaterinburg")
            city_day = datetime.datetime.now().astimezone(city_p).strftime("%d")
            city_month = months[datetime.datetime.now().astimezone(city_p).month - 1]
            city_week_day = week_day[datetime.datetime.today().astimezone(city_p).weekday()]

            bot_message = f"–°–µ–≥–æ–¥–Ω—è {city_day} {city_month}, <b>{city_week_day.upper()}</b>\n–¢–µ–∫—É—â–µ–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è {hours}:{minutes}\n"

            my_file = file.readlines()

            for i in range(len(my_file)):
                if finish_station in my_file[i]:
                    trains_time = my_file[i + 1].split()
                    count_trains = 0
                    for k in range(len(trains_time)):
                        if int(trains_time[k]) > now_time:
                            train_hour = int(trains_time[k]) // 60
                            train_minutes = int(trains_time[k]) % 60

                            if train_hour >= 24:
                                train_hour -= 24

                            if train_hour < 10:
                                train_hour = "0" + str(train_hour)
                            if train_minutes < 10:
                                train_minutes = "0" + str(train_minutes)

                            if count_trains == 0:
                                if (city_week_day == "–°—É–±–±–æ—Ç–∞") or (city_week_day == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"):
                                    if my_file[i].split()[0] == "–í—ã—Ö–æ–¥–Ω—ã–µ":
                                        bot_message += f"<b>\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–µ–∑–¥–æ–≤ –≤ <i>{my_file[i].split()[0].upper()} {my_file[i].split()[1].upper()}</i> —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ {stations_rus[stations.index(start_station)]} –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–∞–Ω—Ü–∏–∏ {finish_station}:</b>\n"
                                    else:
                                        bot_message += f"\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–µ–∑–¥–æ–≤ –≤ {my_file[i].split()[0]} {my_file[i].split()[1]} —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ {stations_rus[stations.index(start_station)]} –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–∞–Ω—Ü–∏–∏ {finish_station}:\n"
                                else:
                                    if my_file[i].split()[0] == "–†–∞–±–æ—á–∏–µ":
                                        bot_message += f"<b>\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–µ–∑–¥–æ–≤ –≤ <i>{my_file[i].split()[0].upper()} {my_file[i].split()[1].upper()}</i> —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ {stations_rus[stations.index(start_station)]} –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–∞–Ω—Ü–∏–∏ {finish_station}:</b>\n"
                                    else:
                                        bot_message += f"\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–µ–∑–¥–æ–≤ –≤ {my_file[i].split()[0]} {my_file[i].split()[1]} —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏ {stations_rus[stations.index(start_station)]} –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–∞–Ω—Ü–∏–∏ {finish_station}:\n"

                            count_trains += 1

                            if (city_week_day == "–°—É–±–±–æ—Ç–∞") or (city_week_day == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"):
                                if my_file[i].split()[0] == "–í—ã—Ö–æ–¥–Ω—ã–µ":
                                    bot_message += f"   <b>{count_trains}. –í {train_hour}:{train_minutes} - –æ—Å—Ç–∞–ª–æ—Å—å {int(trains_time[k]) - now_time} –º–∏–Ω—É—Ç(—ã)</b>\n"
                                else:
                                    bot_message += f"   {count_trains}. –í {train_hour}:{train_minutes} - –æ—Å—Ç–∞–ª–æ—Å—å {int(trains_time[k]) - now_time} –º–∏–Ω—É—Ç(—ã)\n"
                            else:
                                if my_file[i].split()[0] == "–†–∞–±–æ—á–∏–µ":
                                    bot_message += f"   <b>{count_trains}. –í {train_hour}:{train_minutes} - –æ—Å—Ç–∞–ª–æ—Å—å {int(trains_time[k]) - now_time} –º–∏–Ω—É—Ç(—ã)</b>\n"
                                else:
                                    bot_message += f"   {count_trains}. –í {train_hour}:{train_minutes} - –æ—Å—Ç–∞–ª–æ—Å—å {int(trains_time[k]) - now_time} –º–∏–Ω—É—Ç(—ã)\n"

                            if count_trains == 3:
                                break

            main_bot.edit_message_text(bot_message, message.chat.id, edit_message_id, parse_mode="html")

    except telebot.apihelper.ApiTelegramException:
        pass


def menu_func(message):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–Ω—é.
    :param message: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–µ–Ω—é.
    :return: None

    """
    global edit_message_id

    marcup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–ü—Ä–æ—Å–ø–µ–∫—Ç –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤", callback_data="Kosmonavtov_Avenue")
    button2 = types.InlineKeyboardButton("–£—Ä–∞–ª–º–∞—à", callback_data="Uralmash")
    button3 = types.InlineKeyboardButton("–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π", callback_data="Mashinostroiteley")
    button4 = types.InlineKeyboardButton("–£—Ä–∞–ª—å—Å–∫–∞—è", callback_data="Uralskaya")
    button5 = types.InlineKeyboardButton("–î–∏–Ω–∞–º–æ", callback_data="Dinamo")
    button6 = types.InlineKeyboardButton("–ü–ª–æ—â–∞–¥—å 1905 –≥–æ–¥–∞", callback_data="Square_of_1905")
    button7 = types.InlineKeyboardButton("–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è", callback_data="Geologicheskaya")
    button8 = types.InlineKeyboardButton("–ß–∫–∞–ª–æ–≤—Å–∫–∞—è", callback_data="Chkalovskaya")
    button9 = types.InlineKeyboardButton("–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è", callback_data="Botanicheskaya")

    marcup.row(button1, button2, button3)
    marcup.row(button4, button5, button6)
    marcup.row(button7, button8, button9)
    try:
        main_bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é —Å –∫–æ—Ç–æ—Ä–æ–π –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –µ—Ö–∞—Ç—å:", message.chat.id,
                                   message.message_id, reply_markup=marcup)
    except telebot.apihelper.ApiTelegramException:
        main_bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é —Å –∫–æ—Ç–æ—Ä–æ–π –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –µ—Ö–∞—Ç—å", reply_markup=marcup)
        main_bot.send_message(message.chat.id, "üëã")
        edit_message_id = message.message_id + 2


if __name__ == '__main__':
    print("Bot started!")
    main_bot.infinity_polling()
